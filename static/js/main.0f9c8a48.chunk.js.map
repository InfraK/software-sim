{"version":3,"sources":["assets/avatars/man1.svg","assets/avatars/man2.svg","assets/avatars/man3.svg","assets/avatars/man4.svg","assets/avatars/man5.svg","assets/avatars/man6.svg","assets/avatars/woman1.svg","assets/avatars/woman2.svg","assets/avatars/woman3.svg","assets/avatars/woman4.svg","types/index.ts","constants/routes.ts","utils/moneyFormatter.ts","components/Layout/Layout.tsx","components/Page/Page.tsx","utils/documentTitle.tsx","containers/Home/Home.tsx","selectors/index.ts","constants/config.ts","store/finances.ts","store/company.ts","store/products.ts","components/ActionButtons/ActionButtons.tsx","containers/Product/Product.tsx","store/staff.ts","utils/avatar.ts","containers/CompanyCreation/CompanyCreation.tsx","containers/ProductDetails/ProductDetails.tsx","constants/colors.ts","containers/Finance/Finance.tsx","utils/index.ts","containers/Staff/HireStaff/HireStaff.tsx","containers/Staff/AssignStaff/AssignStaff.tsx","containers/Staff/ChangeRole/ChangeRole.tsx","containers/Staff/Staff.tsx","containers/Staff/StaffDetails/StaffDetails.tsx","utils/useInterval.tsx","utils/ConditionalRoute.tsx","App.tsx","serviceWorker.ts","store/index.ts","index.tsx"],"names":["module","exports","Role","Gender","Concept","routes","home","product","productDetails","staff","staffDetails","create","finances","formatMoney","amount","maxFractionDigis","minFractionDigits","formatter","Intl","NumberFormat","style","currency","maximumFractionDigits","minimumFractionDigits","format","Footer","Sider","Header","BaseLayout","children","useState","collapsed","setCollapsed","location","useLocation","money","useSelector","finance","slice","company","date","name","minHeight","width","collapsible","onCollapse","mode","selectedKeys","pathname","Item","key","HomeOutlined","to","CodeOutlined","TeamOutlined","AccountBookOutlined","dayjs","Content","Page","title","subtitle","useEffect","document","useDocumentTitle","goBack","useHistory","subTitle","onBack","padding","margin","Home","state","staffCount","Object","keys","length","productCount","products","value","selectEmployeeProduct","employees","values","map","employee","productId","undefined","initialDate","initialState","concept","Revenue","financeSlice","createSlice","reducers","createRecord","action","record","payload","push","actions","financeReducer","reducer","confirmed","companySlice","createCompany","incrementDate","add","confirmCreate","companyReducer","updateGame","dispatch","getState","filter","id","selectProductWithEmployees","progress","getAllEmployeesByRoles","developers","desginers","qas","marketers","codeProgress","reduce","p","e","expertise","developer","designProgress","designer","qaProgress","qa","marketingProgress","marketing","newTraffic","code","design","quality","traffic","version","salaries","acc","salary","revenue","Salaries","addProgress","getEmployeesByRole","role","Developer","Designer","QA","Marketer","productsSlice","createProduct","buildProduct","forEach","console","log","productsReducer","basic","emptyProduct","uuid","Container","styled","div","ActionButtons","rest","columns","dataIndex","render","replace","Math","floor","ProductPage","visible","setVisible","useDispatch","onClose","onSubmit","direction","type","onClick","PlusOutlined","dataSource","ProductForm","useForm","form","initialValues","onFinish","resetFields","hideRequiredMark","layout","label","rules","required","message","htmlType","staffSlice","hire","person","buildEmployee","fire","assign","changeRole","createCEO","ceo","buildCeo","staffReducer","emptyEmployee","hiredOn","firstName","lastName","base","baseExpertise","background","base10","mansAvatar","man1","man2","man3","man4","man5","man6","womansAvatar","woman1","woman2","woman3","woman4","avatars","Step","Title","CompanyCreation","isFinished","step","avatar","gender","Man","setState","Wrapper","current","icon","UserOutlined","SolutionOutlined","SmileOutlined","prev","status","extra","CEOForm","setGender","avatarOptions","onValuesChange","level","placeholder","Option","Woman","validator","field","includes","Promise","resolve","reject","Group","src","height","CompanyForm","ProductDetails","useParams","String","bordered","colors","Finance","records","sorter","dateA","dateB","isBefore","defaultSortOrder","getLast10Days","r","last30Days","lastMonth","growth","percent","round","sign","winnings","valueStyle","color","suffix","precision","prefix","ArrowUpOutlined","ArrowDownOutlined","getRandomInRange","min","max","random","getRandomItem","array","getRandomFirstName","mansFirst","womansFirst","generateBasicPerson","lastNames","calculateSalary","getRandomAvatarKey","getAvatar","expetise","n","generatePersons","quantity","Array","from","hireColumns","HireStaff","persons","selected","setSelected","rowSelection","selectedRowKeys","onChange","rowKeys","rows","SyncOutlined","UsergroupAddOutlined","UserAddOutlined","rowKey","expandable","expandedRowRender","column","AssignEmployees","Paragraph","trigger","validateTrigger","showSearch","optionFilterProp","ChangeRole","Staff","setAssign","setRole","history","menu","assignEmployee","TagOutlined","DeleteOutlined","_","Button","overlay","EyeOutlined","StaffDetails","useInterval","callback","delay","savedCallback","useRef","setInterval","clearInterval","ConditionalRoute","redirectTo","condition","props","App","basename","exact","path","Boolean","window","hostname","match","rootReducer","combineReducers","persistedReducer","persistReducer","storage","store","configureStore","middleware","thunk","persistor","persistStore","extend","localizedFormat","ReactDOM","StrictMode","loading","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0f9c8a48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man1.74951ae4.svg\";","module.exports = __webpack_public_path__ + \"static/media/man2.179804c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/man3.ea562e65.svg\";","module.exports = __webpack_public_path__ + \"static/media/man4.74ac7de8.svg\";","module.exports = __webpack_public_path__ + \"static/media/man5.045479a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/man6.49d19013.svg\";","module.exports = __webpack_public_path__ + \"static/media/woman1.8215e19f.svg\";","module.exports = __webpack_public_path__ + \"static/media/woman2.7c2dc738.svg\";","module.exports = __webpack_public_path__ + \"static/media/woman3.04357fdc.svg\";","module.exports = __webpack_public_path__ + \"static/media/woman4.3326baf9.svg\";","import { Dayjs } from 'dayjs';\nimport { AvatarKey } from 'utils/avatar';\n\nexport interface BasicProduct {\n  name: string;\n}\n\nexport interface Product extends BasicProduct {\n  id: string;\n  version: string;\n  design: number;\n  code: number;\n  marketing: number;\n  quality: number;\n  traffic: number;\n}\n\nexport interface BasicCEO {\n  firstName: string;\n  lastName: string;\n  gender: Gender;\n  background: Role;\n  avatar: AvatarKey;\n}\n\nexport interface BasicCompany {\n  name: string;\n}\n\nexport interface GameState extends BasicCompany {\n  date: Dayjs;\n  confirmed: boolean;\n}\n\nexport enum Role {\n  'Developer' = 'Developer',\n  'Designer' = 'Designer',\n  'Marketer' = 'Marketer',\n  'QA' = 'QA',\n}\n\nexport interface BasicPerson {\n  id: string;\n  firstName: string;\n  lastName: string;\n  expertise: Expertise;\n  salary: number;\n  avatar: AvatarKey;\n  gender: Gender;\n}\n\nexport enum Gender {\n  'Man' = 'Man',\n  'Woman' = 'Woman',\n}\n\nexport interface Expertise {\n  developer: number;\n  designer: number;\n  marketing: number;\n  qa: number;\n}\n\nexport interface Employee extends BasicPerson {\n  productId?: Product['id'];\n  hiredOn: Dayjs;\n  salary: number;\n  role?: Role;\n}\n\nexport interface EmployeeWithProduct extends Employee {\n  product?: Product;\n}\nexport interface ProductWithEmployee extends Product {\n  employees: Employee[];\n}\n\nexport interface FinanceRecord {\n  date: Dayjs;\n  concept: Concept;\n  amount: number;\n  money: number;\n}\n\nexport type RecordPayload = Omit<FinanceRecord, 'money'>;\n\nexport enum Concept {\n  Salaries = 'Salaries',\n  Revenue = 'Revenue',\n}\n","export const routes = {\n  home: '/',\n  product: '/product',\n  productDetails: '/product/:id',\n  staff: '/staff',\n  staffDetails: '/staff/:id',\n  create: '/create',\n  finances: '/finances',\n};\n","export const formatMoney = (\n  amount: number,\n  maxFractionDigis = 0,\n  minFractionDigits = 0\n) => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    maximumFractionDigits: maxFractionDigis,\n    minimumFractionDigits: minFractionDigits,\n  });\n  return formatter.format(amount);\n};\n","import React, { useState } from 'react';\nimport { Layout, Menu } from 'antd';\nimport {\n  TeamOutlined,\n  AccountBookOutlined,\n  CodeOutlined,\n  MailOutlined,\n  HomeOutlined,\n} from '@ant-design/icons';\nimport { Link, useLocation } from 'react-router-dom';\nimport { routes } from 'constants/routes';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store';\nimport { formatMoney } from 'utils/moneyFormatter';\nimport dayjs from 'dayjs';\n\nconst { Footer, Sider, Header } = Layout;\n\ninterface BaseLayoutProps {\n  children: React.ReactNode;\n}\n\nexport const BaseLayout = ({ children }: BaseLayoutProps) => {\n  const [collapsed, setCollapsed] = useState(false);\n  const location = useLocation();\n  const money = useSelector(\n    ({ finance }: RootState) => finance.slice(-1)[0].money\n  );\n  const { date, name } = useSelector(({ company }: RootState) => company);\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider\n        width={200}\n        collapsible\n        collapsed={collapsed}\n        onCollapse={setCollapsed}\n      >\n        <Menu mode=\"inline\" selectedKeys={[location.pathname]}>\n          <Menu.Item key={routes.home}>\n            <HomeOutlined />\n            <span>Home</span>\n            <Link to={routes.home} />\n          </Menu.Item>\n          {/* <Menu.Item key={routes.create}>\n            <MailOutlined />\n            <Link to={routes.create} />\n            <span>Mail</span>\n          </Menu.Item> */}\n          <Menu.Item key={routes.product}>\n            <Link to={routes.product} />\n            <CodeOutlined />\n            <span>Products</span>\n          </Menu.Item>\n          <Menu.Item key={routes.staff}>\n            <TeamOutlined />\n            <Link to={routes.staff} />\n            <span>Staff</span>\n          </Menu.Item>\n          <Menu.Item key={routes.finances}>\n            <Link to={routes.finances} />\n            <AccountBookOutlined />\n            <span>Finances</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout>\n        <Header>\n          {name || 'Company Name'} | Money: {formatMoney(money)} | Date:{' '}\n          {dayjs(date).format('LL')}\n        </Header>\n        {children}\n        <Footer>Software Sim</Footer>\n      </Layout>\n    </Layout>\n  );\n};\n","import React from 'react';\nimport { Layout, PageHeader } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport { useDocumentTitle } from 'utils/documentTitle';\nconst { Content } = Layout;\n\ninterface PageProps {\n  children: React.ReactNode;\n  title: string;\n  subtitle?: string;\n}\n\nexport const Page = ({ children, title, subtitle }: PageProps) => {\n  useDocumentTitle(title);\n  const { goBack } = useHistory();\n  return (\n    <>\n      <PageHeader title={title} subTitle={subtitle} onBack={goBack} />\n      <Content\n        style={{\n          padding: 24,\n          margin: 0,\n          minHeight: 280,\n        }}\n      >\n        {children}\n      </Content>\n    </>\n  );\n};\n","import { useEffect } from 'react';\n\nexport const useDocumentTitle = (title: string) => {\n  useEffect(() => {\n    document.title = `${title} | Software Sim`;\n  }, [title]);\n};\n","import React from 'react';\nimport { Page } from 'components/Page';\nimport { Statistic, Card, Space } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store';\n\nexport const Home = () => {\n  const { staffCount, productCount } = useSelector((state: RootState) => ({\n    staffCount: Object.keys(state.staff).length,\n    productCount: Object.keys(state.products).length,\n  }));\n\n  return (\n    <Page title=\"Home\">\n      <Space>\n        <Card>\n          <Statistic title=\"Staff\" value={staffCount} />\n        </Card>\n        <Card>\n          <Statistic title=\"Products\" value={productCount} />\n        </Card>\n      </Space>\n    </Page>\n  );\n};\n","import { RootState } from 'store';\nimport { EmployeeWithProduct, ProductWithEmployee } from 'types';\n\nexport const selectEmployeeProduct = (\n  state: RootState\n): EmployeeWithProduct[] => {\n  const employees = state.staff;\n  return Object.values(employees).map((employee) => ({\n    ...employee,\n    product: employee.productId\n      ? state.products[employee.productId]\n      : undefined,\n  }));\n};\n\nexport const selectProductWithEmployees = (\n  state: RootState\n): ProductWithEmployee[] => {\n  const { products, staff } = state;\n  return Object.values(products).map((product) => ({\n    ...product,\n    employees: Object.values(staff).filter(\n      (employee) => employee.productId === product.id\n    ),\n  }));\n};\n","import dayjs from 'dayjs';\n\nexport const initialDate = dayjs('2010-1-1');\n","import { FinanceRecord, Concept, RecordPayload } from 'types';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { initialDate } from 'constants/config';\n\nconst initialState: FinanceRecord[] = [\n  {\n    date: initialDate,\n    amount: 50000,\n    money: 50000,\n    concept: Concept.Revenue,\n  },\n];\n\nconst financeSlice = createSlice({\n  name: 'fianance',\n  initialState,\n  reducers: {\n    createRecord(state, action: PayloadAction<RecordPayload>) {\n      const [{ money }] = state.slice(-1);\n      const record: FinanceRecord = {\n        ...action.payload,\n        money: money + action.payload.amount,\n      };\n      state.push(record);\n    },\n  },\n});\n\nexport const { createRecord } = financeSlice.actions;\nexport const financeReducer = financeSlice.reducer;\n","import dayjs from 'dayjs';\nimport { GameState, BasicCompany } from 'types';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { initialDate } from 'constants/config';\n\nconst initialState: GameState = {\n  name: '',\n  date: initialDate,\n  confirmed: false,\n};\n\nconst companySlice = createSlice({\n  name: 'company',\n  initialState,\n  reducers: {\n    createCompany(state, action: PayloadAction<BasicCompany>) {\n      return { ...state, ...action.payload };\n    },\n    incrementDate(state) {\n      state.date = dayjs(state.date).add(1, 'day');\n    },\n    confirmCreate(state) {\n      state.confirmed = true;\n    },\n  },\n});\n\nexport const {\n  createCompany,\n  incrementDate,\n  confirmCreate,\n} = companySlice.actions;\nexport const companyReducer = companySlice.reducer;\n","import { selectProductWithEmployees } from './../selectors/index';\nimport { RootState } from './index';\nimport { Product, BasicProduct, Role, Employee, Concept } from 'types';\nimport {\n  createSlice,\n  PayloadAction,\n  ThunkDispatch,\n  AnyAction,\n} from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nimport { createRecord } from './finances';\nimport { incrementDate } from './company';\n\nconst initialState: ProductState = {};\n\ninterface ProductState {\n  [key: string]: Product;\n}\n\ninterface ProductProgress {\n  id: string;\n  version: string;\n  marketing: number;\n  quality: number;\n  traffic: number;\n  design: number;\n  code: number;\n}\n\nexport const updateGame = () => (\n  dispatch: ThunkDispatch<{}, {}, AnyAction>,\n  getState: () => RootState\n) => {\n  const products = selectProductWithEmployees(getState());\n  const progress: ProductProgress[] = products.map((product) => {\n    const { developers, desginers, qas, marketers } = getAllEmployeesByRoles(\n      product.employees\n    );\n\n    const codeProgress = developers.reduce(\n      (p, e) => p + e.expertise.developer / 100,\n      0\n    );\n\n    const designProgress = desginers.reduce(\n      (p, e) => p + e.expertise.designer / 100,\n      0\n    );\n\n    const qaProgress = qas.reduce((p, e) => p + e.expertise.qa / 100, 0);\n\n    const marketingProgress = marketers.reduce(\n      (p, e) => p + e.expertise.marketing / 100,\n      0\n    );\n\n    const newTraffic =\n      1 + product.marketing * product.code * product.design + product.quality;\n\n    return {\n      code: codeProgress,\n      design: designProgress,\n      id: product.id,\n      marketing: marketingProgress,\n      quality: qaProgress,\n      traffic: newTraffic,\n      version: product.version,\n    };\n  });\n\n  const salaries = -Object.values(getState().staff).reduce(\n    (acc, employee) => acc + employee.salary,\n    0\n  );\n\n  const revenue = products.reduce(\n    (acc, product) => acc + product.traffic * 0.2,\n    0\n  );\n  const date = getState().company.date;\n\n  if (revenue) {\n    dispatch(createRecord({ amount: revenue, concept: Concept.Revenue, date }));\n  }\n\n  if (salaries) {\n    dispatch(\n      createRecord({ amount: salaries, concept: Concept.Salaries, date })\n    );\n  }\n\n  dispatch(incrementDate());\n  dispatch(addProgress(progress));\n};\n\n// const incrementVersion = (version: string, newFeatures: number) => {\n//   let features = newFeatures;\n//   const [major, minor, patch] = version.split('.').map((s) => Number(s));\n//   if\n//   let newPatch = patch + newFeatures;\n//   if (newPatch > 100) {\n//     newMajor++;\n//   }\n//   let newMajor = major;\n//   let newMinor = minor;\n// };\n\nconst getEmployeesByRole = (role: Role, employees: Employee[]): Employee[] =>\n  employees.filter((employee) => employee.role === role);\n\nconst getAllEmployeesByRoles = (employees: Employee[]) => {\n  return {\n    developers: getEmployeesByRole(Role.Developer, employees),\n    desginers: getEmployeesByRole(Role.Designer, employees),\n    qas: getEmployeesByRole(Role.QA, employees),\n    marketers: getEmployeesByRole(Role.Marketer, employees),\n  };\n};\n\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    createProduct(state, action: PayloadAction<BasicProduct>) {\n      const product = buildProduct(action.payload);\n      state[product.id] = product;\n    },\n    addProgress(state, action: PayloadAction<ProductProgress[]>) {\n      action.payload.forEach((progress) => {\n        console.log(progress);\n        state[progress.id].version = progress.version;\n        state[progress.id].marketing += progress.marketing;\n        state[progress.id].code += progress.code;\n        state[progress.id].design += progress.design;\n        state[progress.id].quality += progress.quality;\n        state[progress.id].traffic += progress.traffic;\n      });\n    },\n  },\n});\n\nexport const { createProduct, addProgress } = productsSlice.actions;\nexport const productsReducer = productsSlice.reducer;\n\nconst buildProduct = (basic: BasicProduct): Product => {\n  return { ...emptyProduct, ...basic, id: uuid() };\n};\n\nconst emptyProduct: Product = {\n  name: '',\n  id: '',\n  code: 0,\n  design: 0,\n  marketing: 0,\n  quality: 0,\n  traffic: 0,\n  version: '0.0.1',\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Space } from 'antd';\nimport { SpaceProps } from 'antd/lib/space';\n\nexport const Container = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\ninterface ActionButtonsProps extends SpaceProps {\n  children: React.ReactNode;\n}\n\nexport const ActionButtons = ({ children, ...rest }: ActionButtonsProps) => (\n  <Container>\n    <Space {...rest}>{children}</Space>\n  </Container>\n);\n","import React, { useState } from 'react';\nimport { Table, Button, Space, Drawer, Form, Input } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Page } from 'components/Page';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store';\nimport { BasicProduct, Product } from 'types';\nimport { Store } from 'antd/lib/form/interface';\nimport { createProduct } from 'store/products';\nimport { ActionButtons } from 'components/ActionButtons';\nimport { Link } from 'react-router-dom';\nimport { routes } from 'constants/routes';\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: (name: string, product: Product) => {\n      return (\n        <Link to={routes.productDetails.replace(':id', product.id)}>\n          {name}\n        </Link>\n      );\n    },\n  },\n  {\n    title: 'Version',\n    dataIndex: 'version',\n    key: 'version',\n  },\n  {\n    title: 'Code',\n    dataIndex: 'code',\n    key: 'code',\n    render: (code: number) => <span>{Math.floor(code)}</span>,\n  },\n  {\n    title: 'Design',\n    dataIndex: 'design',\n    key: 'design',\n    render: (design: number) => <span>{Math.floor(design)}</span>,\n  },\n  {\n    title: 'Quality',\n    dataIndex: 'quality',\n    key: 'quality',\n    render: (quality: number) => <span>{Math.floor(quality)}</span>,\n  },\n  {\n    title: 'Marketing',\n    dataIndex: 'marketing',\n    key: 'marketing',\n    render: (marketing: number) => <span>{Math.floor(marketing)}</span>,\n  },\n  {\n    title: 'Traffic',\n    dataIndex: 'traffic',\n    key: 'traffic',\n    render: (traffic: number) => <span>{Math.floor(traffic)}</span>,\n  },\n];\n\nexport const ProductPage = () => {\n  const [visible, setVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const products = useSelector(({ products }: RootState) =>\n    Object.values(products)\n  );\n\n  const onSubmitProduct = (product: BasicProduct) => {\n    dispatch(createProduct(product));\n    setVisible(false);\n  };\n\n  return (\n    <Page title=\"Products\">\n      <Drawer\n        width={'40vw'}\n        title=\"Create new Product\"\n        visible={visible}\n        onClose={() => setVisible(false)}\n      >\n        <ProductForm onSubmit={onSubmitProduct} />\n      </Drawer>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <ActionButtons>\n          <Button type=\"primary\" onClick={() => setVisible(true)}>\n            <PlusOutlined /> Create Product\n          </Button>\n        </ActionButtons>\n        <Table columns={columns} dataSource={products} />\n      </Space>\n    </Page>\n  );\n};\n\ninterface ProductFormProps {\n  onSubmit: (values: BasicProduct) => void;\n}\n\nconst ProductForm = ({ onSubmit }: ProductFormProps) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values: Store) => {\n    onSubmit(values as BasicProduct);\n    form.resetFields();\n  };\n\n  return (\n    <Form\n      form={form}\n      initialValues={{ name: '' }}\n      onFinish={onFinish}\n      hideRequiredMark\n      layout=\"vertical\"\n    >\n      <Form.Item\n        label=\"Product Name\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Your new product needs a name!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <ActionButtons>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Create\n          </Button>\n        </ActionButtons>\n      </Form.Item>\n    </Form>\n  );\n};\n","import { Employee, BasicPerson, Role, BasicCEO, Expertise } from 'types';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport dayjs from 'dayjs';\n\nconst initialState: StaffState = {};\n\ninterface StaffState {\n  [key: string]: Employee;\n}\n\ninterface AssignPayload {\n  employees: Employee[];\n  productId: string;\n}\ninterface ChangeRolePayload {\n  employees: Employee[];\n  role: Role | undefined;\n}\n\nconst staffSlice = createSlice({\n  name: 'staff',\n  initialState,\n  reducers: {\n    hire(state, action: PayloadAction<BasicPerson[]>) {\n      const employees = action.payload.map((person) => buildEmployee(person));\n      employees.forEach((employee) => {\n        state[employee.id] = employee;\n      });\n    },\n    fire(state, action: PayloadAction<Employee[]>) {\n      action.payload.forEach((employee) => {\n        delete state[employee.id];\n      });\n    },\n    assign(state, action: PayloadAction<AssignPayload>) {\n      const { employees, productId } = action.payload;\n      employees.forEach((employee) => {\n        state[employee.id].productId =\n          productId === 'Unassign' ? undefined : productId;\n      });\n    },\n    changeRole(state, action: PayloadAction<ChangeRolePayload>) {\n      const { employees, role } = action.payload;\n      employees.forEach((employee) => {\n        state[employee.id].role = role;\n      });\n    },\n    createCEO(state, action: PayloadAction<BasicCEO>) {\n      const ceo = buildCeo(action.payload);\n      state[ceo.id] = ceo;\n    },\n  },\n});\n\nexport const { hire, fire, assign, changeRole, createCEO } = staffSlice.actions;\nexport const staffReducer = staffSlice.reducer;\n\nconst buildEmployee = (basic: BasicPerson): Employee => {\n  return { ...emptyEmployee(), ...basic };\n};\n\nconst emptyEmployee = (): Omit<\n  Employee,\n  'expertise' | 'salary' | 'id' | 'avatar' | 'gender'\n> => ({\n  hiredOn: dayjs(),\n  firstName: '',\n  lastName: '',\n});\n\nconst buildCeo = (base: BasicCEO): Employee => {\n  return {\n    ...base,\n    expertise: baseExpertise[base.background],\n    id: 'CEO',\n    hiredOn: dayjs(),\n    salary: 0,\n  };\n};\n\nconst base10: Expertise = {\n  designer: 10,\n  developer: 10,\n  marketing: 10,\n  qa: 10,\n};\n\nconst baseExpertise: { [key in Role]: Expertise } = {\n  [Role.Designer]: {\n    ...base10,\n    designer: 50,\n  },\n  [Role.Developer]: {\n    ...base10,\n    developer: 50,\n  },\n  [Role.Marketer]: {\n    ...base10,\n    marketing: 50,\n  },\n  [Role.QA]: {\n    ...base10,\n    qa: 50,\n  },\n};\n","import man1 from 'assets/avatars/man1.svg';\nimport man2 from 'assets/avatars/man2.svg';\nimport man3 from 'assets/avatars/man3.svg';\nimport man4 from 'assets/avatars/man4.svg';\nimport man5 from 'assets/avatars/man5.svg';\nimport man6 from 'assets/avatars/man6.svg';\nimport woman1 from 'assets/avatars/woman1.svg';\nimport woman2 from 'assets/avatars/woman2.svg';\nimport woman3 from 'assets/avatars/woman3.svg';\nimport woman4 from 'assets/avatars/woman4.svg';\n\nexport const mansAvatar = {\n  man1,\n  man2,\n  man3,\n  man4,\n  man5,\n  man6,\n};\n\nexport const womansAvatar = {\n  woman1,\n  woman2,\n  woman3,\n  woman4,\n};\n\nexport const avatars = {\n  ...mansAvatar,\n  ...womansAvatar,\n};\n\nexport type AvatarKey = keyof typeof avatars;\n","import React, { useState } from 'react';\nimport {\n  Steps,\n  Form,\n  Input,\n  Select,\n  Typography,\n  Button,\n  Result,\n  Space,\n  Avatar,\n  Radio,\n} from 'antd';\nimport {\n  SolutionOutlined,\n  UserOutlined,\n  SmileOutlined,\n} from '@ant-design/icons';\nimport { Store } from 'antd/lib/form/interface';\nimport { routes } from 'constants/routes';\nimport { Link, Redirect } from 'react-router-dom';\nimport { BasicCEO, BasicCompany, Role, Gender } from 'types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createCompany, confirmCreate } from 'store/company';\nimport { createCEO } from 'store/staff';\nimport { ActionButtons } from 'components/ActionButtons';\nimport styled from 'styled-components';\nimport { avatars, mansAvatar, womansAvatar, AvatarKey } from 'utils/avatar';\nimport { RootState } from 'store';\nconst { Step } = Steps;\nconst { Title } = Typography;\n\ninterface State {\n  step: number;\n  ceo: BasicCEO;\n  company: BasicCompany;\n}\n\nexport const CompanyCreation = () => {\n  const dispatch = useDispatch();\n  const isFinished = useSelector((state: RootState) => state.company.confirmed);\n\n  const [state, setState] = useState<State>({\n    step: 0,\n    ceo: {\n      firstName: '',\n      lastName: '',\n      background: Role.Developer,\n      avatar: 'man1',\n      gender: Gender.Man,\n    },\n    company: { name: '' },\n  });\n\n  if (isFinished) {\n    return <Redirect to={routes.home} />;\n  }\n\n  const handleCeoSubmit = (values: BasicCEO) => {\n    setState((prev) => ({ ...prev, step: prev.step + 1, ceo: values }));\n    dispatch(createCEO(values));\n  };\n\n  const handleCompanySubmit = (values: BasicCompany) => {\n    setState((prev) => ({ ...prev, step: prev.step + 1, company: values }));\n    dispatch(createCompany(values));\n  };\n\n  const handleBack = () => {\n    setState((prev) => ({ ...prev, step: prev.step - 1 }));\n  };\n\n  const confirm = () => {\n    dispatch(confirmCreate());\n  };\n\n  const { step, ceo, company } = state;\n\n  return (\n    <Container>\n      <Wrapper direction=\"vertical\">\n        <Steps current={step}>\n          <Step title=\"CEO\" icon={<UserOutlined />} />\n          <Step title=\"Company\" icon={<SolutionOutlined />} />\n          <Step title=\"Done\" icon={<SmileOutlined />} />\n        </Steps>\n        {step === 0 && <CEOForm values={ceo} onSubmit={handleCeoSubmit} />}\n        {step === 1 && (\n          <CompanyForm\n            values={company}\n            onSubmit={handleCompanySubmit}\n            onBack={handleBack}\n          />\n        )}\n        {step === 2 && (\n          <Result\n            status=\"success\"\n            title={`Hurray! ${company.name} is now a real Company!`}\n            subTitle={`${ceo.firstName} ${ceo.lastName} now that you have founded your company, it's time to get working`}\n            extra={[\n              <Link to={routes.home} onClick={confirm}>\n                <Button type=\"primary\" key=\"home\">\n                  Go Home\n                </Button>\n              </Link>,\n            ]}\n          />\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\n\nconst Wrapper = styled(Space)`\n  width: 100%;\n  max-width: 40rem;\n  min-height: 25rem;\n  padding: 1rem;\n`;\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface CEOFormProps {\n  values: BasicCEO;\n  onSubmit: (values: BasicCEO) => void;\n}\n\nconst CEOForm = ({ values, onSubmit }: CEOFormProps) => {\n  const [form] = Form.useForm();\n  const [gender, setGender] = useState(Gender.Man);\n  const onFinish = (values: Store) => {\n    onSubmit(values as BasicCEO);\n  };\n  const avatarOptions = gender === Gender.Man ? mansAvatar : womansAvatar;\n\n  const handleChangeValues = (values: any) => {\n    if (values.gender && values.gender !== gender) {\n      setGender(values.gender);\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      onValuesChange={handleChangeValues}\n      initialValues={values}\n      onFinish={onFinish}\n      hideRequiredMark\n    >\n      <Typography>\n        <Title level={3}>Create CEO</Title>\n      </Typography>\n      <Form.Item\n        label=\"First Name\"\n        name=\"firstName\"\n        rules={[{ required: true, message: 'First name is required' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Last Name\"\n        name=\"lastName\"\n        rules={[{ required: true, message: 'Last name is required' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Background\"\n        name=\"background\"\n        rules={[{ required: true, message: 'Choose your background' }]}\n      >\n        <Select placeholder=\"Choose one\">\n          <Select.Option value=\"Developer\">Developer</Select.Option>\n          <Select.Option value=\"Designer\">Designer</Select.Option>\n          <Select.Option value=\"Marketer\">Marketer</Select.Option>\n          <Select.Option value=\"QA\">QA</Select.Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"Gender\"\n        name=\"gender\"\n        rules={[{ required: true, message: 'Choose your gender!' }]}\n      >\n        <Select>\n          <Select.Option value={Gender.Man}>Man</Select.Option>\n          <Select.Option value={Gender.Woman}>Woman</Select.Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        label=\"Avatar\"\n        name=\"avatar\"\n        rules={[\n          { required: true, message: 'Choose your Avatar' },\n          {\n            validator: (field, value) =>\n              Object.keys(avatarOptions).includes(value)\n                ? Promise.resolve()\n                : Promise.reject('Choose your Avatar'),\n          },\n        ]}\n      >\n        <Radio.Group>\n          {Object.keys(avatarOptions).map((avatar) => (\n            <Radio value={avatar}>\n              <Avatar\n                src={avatars[avatar as AvatarKey]}\n                style={{ width: '4rem', height: '4rem' }}\n              />\n            </Radio>\n          ))}\n        </Radio.Group>\n      </Form.Item>\n      <Form.Item>\n        <ActionButtons>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Continue\n          </Button>\n        </ActionButtons>\n      </Form.Item>\n    </Form>\n  );\n};\n\ninterface CompanyForm {\n  values: BasicCompany;\n  onSubmit: (values: BasicCompany) => void;\n  onBack: () => void;\n}\n\nconst CompanyForm = ({ values, onSubmit, onBack }: CompanyForm) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values: Store) => {\n    onSubmit(values as BasicCompany);\n  };\n\n  return (\n    <Form\n      layout=\"vertical\"\n      form={form}\n      initialValues={values}\n      onFinish={onFinish}\n      hideRequiredMark\n    >\n      <Typography>\n        <Title level={3}>Create Company</Title>\n      </Typography>\n      <Form.Item\n        label=\"Company Name\"\n        name=\"name\"\n        rules={[{ required: true, message: 'The Company name is required!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <ActionButtons>\n          <Space>\n            <Button htmlType=\"submit\" onClick={onBack}>\n              Back\n            </Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Continue\n            </Button>\n          </Space>\n        </ActionButtons>\n      </Form.Item>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Page } from 'components/Page';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store';\nimport { routes } from 'constants/routes';\nimport { Space, Descriptions } from 'antd';\n\nexport const ProductDetails = () => {\n  const { id } = useParams();\n  const product = useSelector(\n    ({ products }: RootState) => products[String(id)]\n  );\n\n  const employees = useSelector(({ staff }: RootState) =>\n    Object.values(staff).filter((employee) => employee.productId === id)\n  );\n\n  if (!product) {\n    return <Redirect to={routes.product} />;\n  }\n\n  return (\n    <Page title={product.name}>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Descriptions bordered>\n          <Descriptions.Item label=\"Version\">\n            {product.version}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Employees\">\n            {employees.length}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Code\">\n            {Math.floor(product.code)}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Design\">\n            {Math.floor(product.design)}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Marketing\">\n            {Math.floor(product.marketing)}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Quality\">\n            {Math.floor(product.quality)}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Traffic\">\n            {Math.floor(product.traffic)}\n          </Descriptions.Item>\n        </Descriptions>\n      </Space>\n    </Page>\n  );\n};\n","export const colors = {\n  primaryColor: '#1890ff', // primary color for all components\n  linkColor: '#1890ff', // link color\n  successColor: '#52c41a', // success state color\n  warningColor: '#faad14', // warning state color\n  errorColor: '#f5222d',\n};\n","import React from 'react';\nimport { Table, Space, Statistic, Card } from 'antd';\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\nimport { Page } from 'components/Page';\nimport { useSelector } from 'react-redux';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport { formatMoney } from 'utils/moneyFormatter';\nimport { FinanceRecord } from 'types';\nimport dayjs from 'dayjs';\nimport { RootState } from 'store';\nimport { colors } from 'constants/colors';\n\nexport const Finance = () => {\n  const records = useSelector(({ finance }: RootState) => finance);\n\n  const columns: ColumnsType<FinanceRecord> = [\n    {\n      title: 'Date',\n      dataIndex: 'date',\n      key: 'date',\n      sorter: ({ date: dateA }, { date: dateB }) =>\n        dayjs(dateA).isBefore(dateB) ? 1 : -1,\n      render: (date) => <span>{dayjs(date).format('L')}</span>,\n      defaultSortOrder: 'ascend',\n    },\n    {\n      title: 'Concept',\n      dataIndex: 'concept',\n      key: 'concept',\n    },\n    {\n      title: 'Amount',\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount) => <span>{formatMoney(amount)}</span>,\n    },\n    {\n      title: 'Money',\n      dataIndex: 'money',\n      key: 'money',\n      render: (money) => <span>{formatMoney(money)}</span>,\n    },\n  ];\n\n  const getLast10Days =\n    records.slice(-10).reduce((acc, r) => acc + r.amount, 0) / 10;\n  const last30Days = records.slice(-30).reduce((acc, r) => acc + r.amount, 0);\n  const lastMonth = records\n    .slice(-60, -30)\n    .reduce((acc, r) => acc + r.amount, 0);\n  const growth = last30Days - lastMonth;\n  const percent = Math.round((growth / lastMonth) * 100) * Math.sign(growth);\n\n  const winnings = percent > 0;\n  const { money } = records.slice(-1)[0];\n\n  return (\n    <Page title=\"Finance\">\n      <Space style={{ width: '100%' }}>\n        <Card>\n          <Statistic\n            title=\"Money\"\n            value={formatMoney(money)}\n            valueStyle={{\n              color: money > 0 ? colors.successColor : colors.errorColor,\n            }}\n          />\n        </Card>\n        <Card>\n          <Statistic\n            title=\"Avergage income (last 10 days)\"\n            valueStyle={{\n              color:\n                getLast10Days > 0 ? colors.successColor : colors.errorColor,\n            }}\n            value={formatMoney(getLast10Days)}\n            suffix=\"/day\"\n          />\n        </Card>\n        <Card>\n          <Statistic\n            title=\"Last 30 days Winnings\"\n            valueStyle={{\n              color: last30Days > 0 ? colors.successColor : colors.errorColor,\n            }}\n            value={formatMoney(last30Days)}\n          />\n        </Card>\n        <Card>\n          <Statistic\n            title=\"Las 30 Days Growth\"\n            precision={2}\n            valueStyle={{\n              color: winnings ? colors.successColor : colors.errorColor,\n            }}\n            prefix={winnings ? <ArrowUpOutlined /> : <ArrowDownOutlined />}\n            suffix=\"%\"\n            value={percent}\n          />\n        </Card>\n      </Space>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Table columns={columns} dataSource={records} />\n      </Space>\n    </Page>\n  );\n};\n","import { Expertise, Gender } from './../types/index';\nimport mansFirst from 'constants/mansFirst.json';\nimport womansFirst from 'constants/femaleFirst.json';\nimport lastNames from 'constants/lastNames.json';\nimport { BasicPerson } from 'types';\nimport { v4 as uuid } from 'uuid';\nimport { avatars, AvatarKey, mansAvatar, womansAvatar } from './avatar';\n\nexport const getRandomInRange = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nexport const getRandomItem = <T>(array: T[]): T =>\n  array[getRandomInRange(0, array.length)];\n\nexport const getRandomFirstName = (gender: Gender) =>\n  gender === Gender.Man ? getRandomItem(mansFirst) : getRandomItem(womansFirst);\n\nexport const getRandomLastName = () => getRandomItem(lastNames);\n\nexport const getRandomExpertise = (): Expertise => {\n  return {\n    designer: getRandomInRange(10, 80),\n    developer: getRandomInRange(10, 80),\n    marketing: getRandomInRange(10, 80),\n    qa: getRandomInRange(10, 80),\n  };\n};\n\nexport const generateBasicPerson = (): BasicPerson => {\n  const expertise = getRandomExpertise();\n  const gender = getRandomItem(Object.values(Gender));\n  return {\n    firstName: getRandomFirstName(gender),\n    lastName: getRandomLastName(),\n    expertise,\n    salary: calculateSalary(expertise),\n    id: uuid(),\n    gender,\n    avatar: getRandomAvatarKey(gender),\n  };\n};\n\nexport const getRandomAvatarKey = (gender: Gender): AvatarKey =>\n  getRandomItem(\n    Object.keys(\n      gender === Gender.Man ? mansAvatar : womansAvatar\n    ) as AvatarKey[]\n  );\n\nexport const getAvatar = (key: AvatarKey) => avatars[key];\n\nconst salaryPerPoint = 20;\n\nexport const calculateSalary = (expetise: Expertise): number => {\n  return Object.values(expetise).reduce((p, n) => p + n, 0) * salaryPerPoint;\n};\n\nexport const generatePersons = (quantity: number) =>\n  Array.from({ length: quantity }, () => generateBasicPerson());\n","import React, { useState } from 'react';\nimport { Table, Button, Space, Descriptions, Drawer, Avatar } from 'antd';\nimport {\n  UserAddOutlined,\n  UsergroupAddOutlined,\n  SyncOutlined,\n} from '@ant-design/icons';\nimport { BasicPerson } from 'types';\nimport { ActionButtons } from 'components/ActionButtons';\nimport { generatePersons, getAvatar } from 'utils';\nimport { ColumnsType } from 'antd/lib/table';\nimport { TableRowSelection } from 'antd/lib/table/interface';\nimport { formatMoney } from 'utils/moneyFormatter';\n\nconst hireColumns: ColumnsType<BasicPerson> = [\n  {\n    title: 'First Name',\n    dataIndex: 'firstName',\n    key: 'firstName',\n  },\n  {\n    title: 'Last Name',\n    dataIndex: 'lastName',\n    key: 'lastName',\n  },\n  {\n    title: 'Salary',\n    dataIndex: 'salary',\n    key: 'salary',\n    render: (salary: number) => <span>{formatMoney(salary)}</span>,\n  },\n];\n\ninterface HireStaffState {\n  keys: React.Key[];\n  persons: BasicPerson[];\n}\n\ninterface HireStaffProps {\n  visible: boolean;\n  onSubmit: (persons: BasicPerson[]) => void;\n  onClose: () => void;\n}\n\nexport const HireStaff = ({ visible, onClose, onSubmit }: HireStaffProps) => {\n  const [selected, setSelected] = useState<HireStaffState>({\n    keys: [],\n    persons: [],\n  });\n  const [state, setState] = useState(generatePersons(10));\n\n  const onSelectChange: TableRowSelection<BasicPerson>['onChange'] = (\n    rowKeys,\n    rows\n  ) => {\n    setSelected({ keys: rowKeys, persons: rows });\n  };\n\n  const onHire = () => {\n    onSubmit(selected.persons);\n  };\n\n  const rowSelection: TableRowSelection<BasicPerson> = {\n    selectedRowKeys: selected.keys,\n    onChange: onSelectChange,\n  };\n\n  const refresh = () => {\n    setState(generatePersons(10));\n  };\n\n  return (\n    <Drawer\n      width={'40vw'}\n      title=\"Hire Staff\"\n      visible={visible}\n      onClose={onClose}\n    >\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <ActionButtons>\n          <Button onClick={refresh}>\n            <SyncOutlined />\n            Refresh Results\n          </Button>\n          <Button type=\"primary\" onClick={onHire}>\n            {selected.persons.length > 1 ? (\n              <UsergroupAddOutlined />\n            ) : (\n              <UserAddOutlined />\n            )}\n            Hire Selected\n          </Button>\n        </ActionButtons>\n        <Table\n          rowKey={(person) => person.id}\n          rowSelection={rowSelection}\n          expandable={{\n            expandedRowRender: (person) => {\n              return (\n                <>\n                  <Descriptions\n                    column={1}\n                    bordered\n                    title={\n                      <Space>\n                        <Avatar src={getAvatar(person.avatar)} />\n                        <span>\n                          {person.firstName} {person.lastName}\n                        </span>\n                      </Space>\n                    }\n                  >\n                    {console.log(getAvatar(person.avatar))}\n                    <Descriptions.Item label=\"Salary\">\n                      {formatMoney(person.salary)}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Design Skill\">\n                      {person.expertise.designer}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Developer Skill\">\n                      {person.expertise.developer}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"QA Skill\">\n                      {person.expertise.qa}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Marketing Skill\">\n                      {person.expertise.marketing}\n                    </Descriptions.Item>\n                  </Descriptions>\n                </>\n              );\n            },\n          }}\n          columns={hireColumns}\n          dataSource={state}\n        />\n      </Space>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport { Button, Form, Select, Typography, Drawer } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store';\nimport { Employee } from 'types';\nimport { ActionButtons } from 'components/ActionButtons';\nimport { assign } from 'store/staff';\nimport { Store } from 'antd/lib/form/interface';\nconst { Option } = Select;\n\ninterface AssignEmployeesProps {\n  employees: Employee[];\n  visible: boolean;\n  onClose: () => void;\n}\nexport const AssignEmployees = ({\n  visible,\n  onClose,\n  employees,\n}: AssignEmployeesProps) => {\n  const dispatch = useDispatch();\n  const products = useSelector((state: RootState) =>\n    Object.values(state.products)\n  );\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: Store) => {\n    dispatch(assign({ employees, productId: values.productId }));\n    onClose();\n    form.resetFields();\n  };\n\n  if (!employees.length) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      width={'40vw'}\n      title=\"Assign Staff\"\n      visible={visible}\n      onClose={onClose}\n    >\n      <Form\n        form={form}\n        initialValues={{ productId: '' }}\n        onFinish={onFinish}\n        hideRequiredMark\n        layout=\"vertical\"\n      >\n        <Typography>\n          <Typography.Paragraph>\n            {employees.length > 1\n              ? `Assigning ${employees.length} employees`\n              : `Assigning ${employees[0].firstName} ${employees[0].lastName}`}\n          </Typography.Paragraph>\n        </Typography>\n        <Form.Item\n          label=\"Product Name\"\n          name=\"productId\"\n          trigger=\"onSelect\"\n          validateTrigger=\"onSelect\"\n          rules={[{ required: true, message: 'You need to choose a product!' }]}\n        >\n          <Select\n            showSearch\n            placeholder=\"Select a product\"\n            optionFilterProp=\"children\"\n          >\n            <Option value=\"Unassign\">Unassign</Option>\n            {products.map((product) => (\n              <Option value={product.id}>{product.name}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <ActionButtons>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Assign\n            </Button>\n          </ActionButtons>\n        </Form.Item>\n      </Form>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport { Button, Form, Select, Typography, Drawer } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { Employee, Role } from 'types';\nimport { ActionButtons } from 'components/ActionButtons';\nimport { changeRole } from 'store/staff';\nimport { Store } from 'antd/lib/form/interface';\nconst { Option } = Select;\n\ninterface ChangeRoleProps {\n  employees: Employee[];\n  onClose: () => void;\n  visible: boolean;\n}\n\nexport const ChangeRole = ({\n  onClose,\n  employees,\n  visible,\n}: ChangeRoleProps) => {\n  const dispatch = useDispatch();\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: Store) => {\n    dispatch(changeRole({ employees, role: values.role }));\n    onClose();\n    form.resetFields();\n  };\n\n  if (!employees.length) {\n    return null;\n  }\n\n  return (\n    <Drawer\n      width={'40vw'}\n      title=\"Change Role\"\n      visible={visible}\n      onClose={onClose}\n    >\n      <Form\n        form={form}\n        initialValues={{ role: 'undefined' }}\n        onFinish={onFinish}\n        hideRequiredMark\n        layout=\"vertical\"\n      >\n        <Typography>\n          <Typography.Paragraph>\n            {employees.length > 1\n              ? `Changing ${employees.length} employees role's`\n              : `Changing ${employees[0].firstName} ${employees[0].lastName} role`}\n          </Typography.Paragraph>\n        </Typography>\n        <Form.Item\n          label=\"Role\"\n          name=\"role\"\n          trigger=\"onSelect\"\n          validateTrigger=\"onSelect\"\n          rules={[{ required: true, message: 'You need to choose a role!' }]}\n        >\n          <Select placeholder=\"Select a Role\" optionFilterProp=\"children\">\n            <Option value=\"undefined\">None</Option>\n            {Object.values(Role).map((role) => (\n              <Option value={role}>{role}</Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item>\n          <ActionButtons>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Change\n            </Button>\n          </ActionButtons>\n        </Form.Item>\n      </Form>\n    </Drawer>\n  );\n};\n","import React, { useState } from 'react';\nimport { Table, Button, Space, Menu, Dropdown } from 'antd';\nimport {\n  PlusOutlined,\n  EyeOutlined,\n  DeleteOutlined,\n  UserAddOutlined,\n  TagOutlined,\n} from '@ant-design/icons';\nimport { Page } from 'components/Page';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BasicPerson, Employee, EmployeeWithProduct } from 'types';\nimport { ActionButtons } from 'components/ActionButtons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from 'constants/routes';\nimport { hire, fire } from 'store/staff';\nimport { ColumnsType } from 'antd/lib/table';\nimport { TableRowSelection } from 'antd/lib/table/interface';\nimport { Store } from 'antd/lib/form/interface';\nimport { HireStaff } from './HireStaff';\nimport { AssignEmployees } from './AssignStaff';\nimport { formatMoney } from 'utils/moneyFormatter';\nimport { ChangeRole } from './ChangeRole';\nimport { selectEmployeeProduct } from 'selectors';\n\ninterface AssignState {\n  visible: boolean;\n  employees: Employee[];\n}\n\nexport const Staff = () => {\n  const [visible, setVisible] = useState(false);\n  const [assign, setAssign] = useState<AssignState>({\n    visible: false,\n    employees: [],\n  });\n\n  const [role, setRole] = useState<AssignState>({\n    visible: false,\n    employees: [],\n  });\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const employees = useSelector(selectEmployeeProduct);\n\n  const onSubmitEmployees = (persons: BasicPerson[]) => {\n    dispatch(hire(persons));\n    setVisible(false);\n  };\n\n  const assignEmployee = (employee: Employee) => {\n    setAssign({ visible: true, employees: [employee] });\n  };\n\n  const changeRole = (employee: Employee) => {\n    setRole({ visible: true, employees: [employee] });\n  };\n\n  const menu = (employee: EmployeeWithProduct) => (\n    <Menu>\n      <Menu.Item onClick={() => assignEmployee(employee)}>\n        <UserAddOutlined /> Asign\n      </Menu.Item>\n      <Menu.Item onClick={() => changeRole(employee)}>\n        <TagOutlined /> Change Role\n      </Menu.Item>\n      <Menu.Item onClick={() => dispatch(fire([employee]))}>\n        <DeleteOutlined />\n        Fire\n      </Menu.Item>\n    </Menu>\n  );\n\n  const columns: ColumnsType<EmployeeWithProduct> = [\n    {\n      title: 'Name',\n      dataIndex: 'firstName',\n      key: 'firstName',\n      render: (firstName: string, employee: Employee) => {\n        return (\n          <Link to={routes.staffDetails.replace(':id', employee.id)}>\n            {`${employee.lastName}, ${firstName}`}\n          </Link>\n        );\n      },\n    },\n    {\n      title: 'Product',\n      dataIndex: 'productId',\n      key: 'productId',\n      render: (_, employee) => {\n        if (!employee.product) {\n          return null;\n        }\n        return (\n          <Link to={routes.productDetails.replace(':id', employee.product.id)}>\n            {employee.product?.name}\n          </Link>\n        );\n      },\n    },\n    {\n      title: 'Role',\n      dataIndex: 'role',\n      key: 'role',\n    },\n    {\n      title: 'Salary',\n      dataIndex: 'salary',\n      key: 'salary',\n      render: (salary) => <span>{formatMoney(salary)}</span>,\n    },\n    {\n      title: 'Actions',\n      dataIndex: '',\n      key: 'x',\n      render: (employee: Employee) => {\n        return (\n          <Dropdown.Button\n            overlay={menu(employee)}\n            trigger={['click']}\n            onClick={() =>\n              history.push(routes.staffDetails.replace(':id', employee.id))\n            }\n          >\n            <EyeOutlined />\n            View\n          </Dropdown.Button>\n        );\n      },\n    },\n  ];\n\n  const closeAssign = () => setAssign({ visible: false, employees: [] });\n  const closeRole = () => setRole({ visible: false, employees: [] });\n\n  return (\n    <Page title=\"Staff\">\n      <HireStaff\n        onSubmit={onSubmitEmployees}\n        onClose={() => setVisible(false)}\n        visible={visible}\n      />\n\n      <AssignEmployees\n        employees={assign.employees}\n        onClose={closeAssign}\n        visible={assign.visible}\n      />\n\n      <ChangeRole\n        employees={role.employees}\n        onClose={closeRole}\n        visible={role.visible}\n      />\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <ActionButtons>\n          <Button type=\"primary\" onClick={() => setVisible(true)}>\n            <PlusOutlined /> Hire Staff\n          </Button>\n        </ActionButtons>\n        <Table columns={columns} dataSource={employees} />\n      </Space>\n    </Page>\n  );\n};\n","import React from 'react';\nimport { Page } from 'components/Page';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store';\nimport { routes } from 'constants/routes';\nimport { Space, Descriptions } from 'antd';\nimport { formatMoney } from 'utils/moneyFormatter';\n\nexport const StaffDetails = () => {\n  const { id } = useParams();\n  const employee = useSelector(({ staff }: RootState) => staff[String(id)]);\n\n  const product = useSelector(({ products }: RootState) =>\n    employee.productId ? products[employee.productId] : undefined\n  );\n\n  if (!employee) {\n    return <Redirect to={routes.product} />;\n  }\n\n  return (\n    <Page title={`${employee.firstName} ${employee.lastName}`}>\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\n        <Descriptions\n          column={1}\n          bordered\n          title={`${employee.firstName} ${employee.lastName}`}\n        >\n          <Descriptions.Item label=\"Product\">\n            {product?.name || 'No product'}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Role\">\n            {employee.role || 'No role'}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Salary\">\n            {formatMoney(employee.salary)}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Design Skill\">\n            {employee.expertise.designer}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Developer Skill\">\n            {employee.expertise.developer}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"QA Skill\">\n            {employee.expertise.qa}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"Marketing Skill\">\n            {employee.expertise.marketing}\n          </Descriptions.Item>\n        </Descriptions>\n      </Space>\n    </Page>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback: Function, delay: number) => {\n  const savedCallback = useRef<Function>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const handler = (...args: any[]) =>\n      savedCallback.current && savedCallback.current(...args);\n\n    if (delay !== null) {\n      const id = setInterval(handler, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\n\nexport interface ConditionalRouteProps extends RouteProps {\n  redirectTo: string;\n  condition: boolean;\n}\n\nexport const ConditionalRoute = ({\n  redirectTo,\n  condition,\n  ...props\n}: ConditionalRouteProps) => {\n  if (!condition) {\n    return <Redirect to={redirectTo} />;\n  }\n  return <Route {...props} />;\n};\n","import React from 'react';\nimport { BaseLayout } from 'components/Layout';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Home } from 'containers/Home';\nimport { ProductPage } from 'containers/Product';\nimport { routes } from 'constants/routes';\nimport { CompanyCreation } from 'containers/CompanyCreation';\nimport { ProductDetails } from 'containers/ProductDetails';\nimport { Finance } from 'containers/Finance';\nimport { Staff } from 'containers/Staff';\nimport { StaffDetails } from 'containers/Staff/StaffDetails';\nimport useInterval from 'utils/useInterval';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store';\nimport { updateGame } from 'store/products';\nimport { ConditionalRoute } from 'utils/ConditionalRoute';\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  useInterval(() => {\n    dispatch(updateGame());\n  }, 10000);\n\n  const isFinished = useSelector(({ company }: RootState) => company.confirmed);\n\n  return (\n    <BrowserRouter basename=\"software-sim\">\n      <Switch>\n        <Route exact path={routes.create}>\n          <CompanyCreation />\n        </Route>\n        <BaseLayout>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.home}\n          >\n            <Home />\n          </ConditionalRoute>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.product}\n          >\n            <ProductPage />\n          </ConditionalRoute>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.productDetails}\n          >\n            <ProductDetails />\n          </ConditionalRoute>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.staff}\n          >\n            <Staff />\n          </ConditionalRoute>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.staffDetails}\n          >\n            <StaffDetails />\n          </ConditionalRoute>\n          <ConditionalRoute\n            condition={isFinished}\n            redirectTo={routes.create}\n            exact\n            path={routes.finances}\n          >\n            <Finance />\n          </ConditionalRoute>\n        </BaseLayout>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { combineReducers } from 'redux';\nimport { companyReducer } from './company';\nimport { productsReducer } from './products';\nimport { staffReducer } from './staff';\nimport { financeReducer } from './finances';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n  company: companyReducer,\n  products: productsReducer,\n  staff: staffReducer,\n  finance: financeReducer,\n});\n\nexport const persistedReducer = persistReducer(\n  { key: 'root', storage },\n  rootReducer\n);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: [thunk],\n});\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from 'store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\ndayjs.extend(localizedFormat);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}